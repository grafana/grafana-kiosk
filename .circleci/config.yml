version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

workflows:
  version: 2
  build_workflow:
    jobs:
      - cmd_lint
      - cmd_test
      - build:
          requires:
          - cmd_lint
          - cmd_test
      - approve_release:
          type: approval
          requires:
          - build
          filters: *filter-only-master
      - publish_github_release:
          requires:
          - approve_release
          filters: *filter-only-master

executors:
  go_exec:
    docker:
      - image: circleci/golang:1.14.2

jobs:
  build:
    executor: go_exec
    working_directory: /go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Build
          command: make
      - persist_to_workspace:
          root: .
          paths:
          - bin

  cmd_lint:
    executor: go_exec
    working_directory: /go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Linters
          command: build/circle-cmd-lint.sh

  cmd_test:
    executor: go_exec
    working_directory: /go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Test and Coverage
          command: |
            mkdir -p coverage
            #go test -covermode=count -coverprofile=coverage/count.out ./...
            go test -v -coverpkg=./... --coverprofile=coverage/coverage.out ./...
            go test ./... -coverprofile coverage/cover.out; go tool cover -func coverage/cover.out
            go tool cover -html=coverage/coverage.out  -o coverage/coverage.html
      - persist_to_workspace:
          root: .
          paths:
          - coverage
      - store_artifacts:
          path: coverage

  publish_github_release:
    working_directory: /go/src/github.com/grafana/grafana-kiosk
    docker:
      - image: cibuilds/github:0.13
    steps:
      - add_ssh_keys:
          fingerprints:
          - << pipeline.parameters.ssh-fingerprint >>
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            PROJECT_NAME=grafana-kiosk
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            VERSION=`awk 'BEGIN {FS="##"; RS=""} FNR==2 {print; exit}' CHANGELOG.md | cut -f2 -d' '`
            # create zip file
            echo "Creating ZIP"
            cd /go/src/github.com/grafana
            zip \
              -x grafana-kiosk/.circleci/**\* \
              -x grafana-kiosk/.git/**\* \
              -x grafana-kiosk/.gitignore \
              -x grafana-kiosk/Gopkg.lock \
              -x grafana-kiosk/Gopkg.toml \
              -x grafana-kiosk/Makefile \
              -x grafana-kiosk/build/**\* \
              -x grafana-kiosk/coverage/**\* \
              -x grafana-kiosk/pkg/**\* \
              -x grafana-kiosk/vendor/**\* \
              -r /tmp/grafana-kiosk-${VERSION}.zip \
              grafana-kiosk
            # create tar file
            echo "Creating TAR"
            tar \
              --exclude .circleci \
              --exclude .git \
              --exclude .gitignore \
              --exclude Gopkg.lock \
              --exclude Gopkg.toml \
              --exclude Makefile \
              --exclude build \
              --exclude coverage \
              --exclude pkg \
              --exclude vendor \
              -cvf /tmp/grafana-kiosk-${VERSION}.tar \
              grafana-kiosk
            gzip /tmp/grafana-kiosk-${VERSION}.tar
            # create artifacts
            mkdir -p /go/src/github.com/grafana/grafana-kiosk/artifacts
            mv /tmp/grafana-kiosk-${VERSION}.zip /go/src/github.com/grafana/grafana-kiosk/artifacts/
            mv /tmp/grafana-kiosk-${VERSION}.tar.gz /go/src/github.com/grafana/grafana-kiosk/artifacts/
            cd /go/src/github.com/grafana/grafana-kiosk
            ls -al
            git config user.email "eng@grafana.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            git add --force artifacts
            git add --force bin
            git add --force coverage
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PROJECT_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/
      - store_artifacts:
          path: artifacts
      - store_artifacts:
          path: coverage
