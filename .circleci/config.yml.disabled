version: 2.1

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}
  codeclimate-reporter-id:
    type: string
    default: ${CC_TEST_REPORTER_ID}

aliases:
  # Workflow filters
  - &filter-only-main
    branches:
      only: main

workflows:
  version: 2
  build_workflow:
    jobs:
    - cmd_lint
    - cmd_test
    - build:
        requires:
        - cmd_lint
        - cmd_test
    - code_coverage:
        requires:
        - build
    - upload_coverage:
        requires:
        - code_coverage
    - approve_release:
        type: approval
        requires:
        - upload_coverage
        filters: *filter-only-main
    - publish_github_release:
        requires:
        - approve_release
        filters: *filter-only-main

executors:
  default_exec:
    docker:
      - image: grafana/grafana-plugin-ci:1.1.2-alpine
  go_exec:
    docker:
      - image: cimg/go:1.19

jobs:
  build:
    executor: go_exec
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Build
          command: make
      - persist_to_workspace:
          root: .
          paths:
          - bin

  cmd_lint:
    executor: go_exec
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Linters
          command: build/circle-cmd-lint.sh

  cmd_test:
    executor: go_exec
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - run:
          name: Test and Coverage
          command: |
            mkdir -p coverage
            go test -v -coverpkg=./... --coverprofile=coverage/coverage.out ./...
            go tool cover -func coverage/coverage.out
            go tool cover -html=coverage/coverage.out -o coverage/coverage.html
      - persist_to_workspace:
          root: .
          paths:
          - coverage
      - store_artifacts:
          path: coverage

  code_coverage:
    executor: go_exec
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run coverage report
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter format-coverage -t gocov --debug -o ci/jobs/code_coverage/codeclimate.json coverage/coverage.out || true
      - persist_to_workspace:
          root: .
          paths:
            - ci/jobs/code_coverage
      - store_artifacts:
          path: ci/jobs/code_coverage

  upload_coverage:
    executor: go_exec
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload coverage results to Code Climate
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter upload-coverage -i ci/jobs/code_coverage/codeclimate.json
      - store_artifacts:
          path: ci/jobs/upload_coverage

  publish_github_release:
    working_directory: /home/circleci/go/src/github.com/grafana/grafana-kiosk
    docker:
      - image: cibuilds/github:0.13
    steps:
      - add_ssh_keys:
          fingerprints:
          - << pipeline.parameters.ssh-fingerprint >>
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            apk add --update --no-cache git-lfs
            git lfs install
            PROJECT_NAME=grafana-kiosk
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            VERSION=`awk 'BEGIN {FS="##"; RS=""} FNR==2 {print; exit}' CHANGELOG.md | cut -f2 -d' '`
            # create zip file
            echo "Creating ZIP"
            cd /home/circleci/go/src/github.com/grafana
            zip \
              -x grafana-kiosk/.circleci/**\* \
              -x grafana-kiosk/.git/**\* \
              -x grafana-kiosk/.gitattributes \
              -x grafana-kiosk/.gitignore \
              -x grafana-kiosk/go.mod \
              -x grafana-kiosk/go.sum \
              -x grafana-kiosk/Makefile \
              -x grafana-kiosk/build/**\* \
              -x grafana-kiosk/ci/**\* \
              -x grafana-kiosk/coverage/**\* \
              -x grafana-kiosk/pkg/**\* \
              -x grafana-kiosk/vendor/**\* \
              -r /tmp/grafana-kiosk-${VERSION}.zip \
              grafana-kiosk
            # create tar file
            echo "Creating TAR"
            tar \
              --exclude .circleci \
              --exclude .git \
              --exclude .gitattributes \
              --exclude .gitignore \
              --exclude go.mod \
              --exclude go.sum \
              --exclude Makefile \
              --exclude build \
              --exclude coverage \
              --exclude ci \
              --exclude pkg \
              --exclude vendor \
              -cvf /tmp/grafana-kiosk-${VERSION}.tar \
              grafana-kiosk
            gzip /tmp/grafana-kiosk-${VERSION}.tar
            # create artifacts
            mkdir -p /home/circleci/go/src/github.com/grafana/grafana-kiosk/artifacts
            mv /tmp/grafana-kiosk-${VERSION}.zip /home/circleci/go/src/github.com/grafana/grafana-kiosk/artifacts/
            mv /tmp/grafana-kiosk-${VERSION}.tar.gz /home/circleci/go/src/github.com/grafana/grafana-kiosk/artifacts/
            cd /home/circleci/go/src/github.com/grafana/grafana-kiosk
            ls -al
            git config user.email "eng@grafana.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            cp -p bin/* artifacts/
            git add --force artifacts
            git add --force bin
            git add --force coverage
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PROJECT_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/
      - store_artifacts:
          path: artifacts
      - store_artifacts:
          path: coverage
